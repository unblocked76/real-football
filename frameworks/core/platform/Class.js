var gloft=gloft||{};gloft.defineGetterSetter=function(h,b,l,d,n,g){if(h.__defineGetter__){l&&h.__defineGetter__(b,l);d&&h.__defineSetter__(b,d)}else{if(Object.defineProperty){var j={enumerable:false,configurable:true};l&&(j.get=l);d&&(j.set=d);Object.defineProperty(h,b,j)}else{throw new Error("browser does not support getters")}}if(!n&&!g){var m=(l!=null),e=(d!=undefined),k=Object.getOwnPropertyNames(h);for(var f=0;f<k.length;f++){var a=k[f];if((h.__lookupGetter__?h.__lookupGetter__(a):Object.getOwnPropertyDescriptor(h,a))||typeof h[a]!=="function"){continue}var c=h[a];if(m&&c===l){n=a;if(!e||g){break}}if(e&&c===d){g=a;if(!m||n){break}}}}var o=h.constructor;if(n){if(!o.__getters__){o.__getters__={}}o.__getters__[n]=b}if(g){if(!o.__setters__){o.__setters__={}}o.__setters__[g]=b}};gloft.clone=function(c){var a=(c.constructor)?new c.constructor:{};for(var b in c){var d=c[b];if(((typeof d)==="object")&&d&&!(d instanceof gloft.Node)&&!(d instanceof HTMLElement)){a[b]=gloft.clone(d)}else{a[b]=d}}return a};gloft.inject=function(a,c){for(var b in a){c[b]=a[b]}};var ClassManager=function(){var b=(0|(Math.random()*998));var a=(0|(Math.random()*998));this.getNewID=function(){return b++};this.getNewInstanceId=function(){return a++}};var classManager=new ClassManager();(function(){var fnTest=/\b_super\b/;gloft.Class=function(){};gloft.Class.extend=function(props){var _super=this.prototype;var prototype=Object.create(_super);var desc={writable:true,enumerable:false,configurable:true};var Class;if(gloft.runtime.config&&gloft.runtime.config[gloft.runtime.CONFIG_KEY.exposeClassName]){var constructor="(function "+(props._className||"Class")+" (arg0, arg1, arg2, arg3, arg4, arg5) {\n";constructor+="    this.__instanceId = classManager.getNewInstanceId();\n";constructor+="    if (this.ctor) {\n";constructor+="        switch (arguments.length) {\n";constructor+="        case 0: this.ctor(); break;\n";constructor+="        case 1: this.ctor(arg0); break;\n";constructor+="        case 3: this.ctor(arg0, arg1, arg2); break;\n";constructor+="        case 4: this.ctor(arg0, arg1, arg2, arg3); break;\n";constructor+="        case 5: this.ctor(arg0, arg1, arg2, arg3, arg4); break;\n";constructor+="        default: this.ctor.apply(this, arguments);\n";constructor+="        }\n";constructor+="    }\n";constructor+="})";Class=eval(constructor)}else{Class=function(arg0,arg1,arg2,arg3,arg4){this.__instanceId=classManager.getNewInstanceId();if(this.ctor){switch(arguments.length){case 0:this.ctor();break;case 1:this.ctor(arg0);break;case 2:this.ctor(arg0,arg1);break;case 3:this.ctor(arg0,arg1,arg2);break;case 4:this.ctor(arg0,arg1,arg2,arg3);break;case 5:this.ctor(arg0,arg1,arg2,arg3,arg4);break;default:this.ctor.apply(this,arguments)}}}}desc.value=classManager.getNewID();Object.defineProperty(prototype,"__pid",desc);Class.prototype=prototype;desc.value=Class;Object.defineProperty(prototype,"constructor",desc);this.__getters__&&(Class.__getters__=gloft.clone(this.__getters__));this.__setters__&&(Class.__setters__=gloft.clone(this.__setters__));for(var idx=0,li=arguments.length;idx<li;++idx){var prop=arguments[idx];for(var name in prop){var isFunc=(typeof prop[name]==="function");var override=(typeof _super[name]==="function");var hasSuperCall=fnTest.test(prop[name]);if(isFunc&&override&&hasSuperCall){desc.value=(function(name,fn){return function(){var tmp=this._super;this._super=_super[name];var ret=fn.apply(this,arguments);this._super=tmp;return ret}})(name,prop[name]);Object.defineProperty(prototype,name,desc)}else{if(isFunc){desc.value=prop[name];Object.defineProperty(prototype,name,desc)}else{prototype[name]=prop[name]}}if(isFunc){var getter,setter,propertyName;if(this.__getters__&&this.__getters__[name]){propertyName=this.__getters__[name];for(var i in this.__setters__){if(this.__setters__[i]===propertyName){setter=i;break}}gloft.defineGetterSetter(prototype,propertyName,prop[name],prop[setter]?prop[setter]:prototype[setter],name,setter)}if(this.__setters__&&this.__setters__[name]){propertyName=this.__setters__[name];for(var i in this.__getters__){if(this.__getters__[i]===propertyName){getter=i;break}}gloft.defineGetterSetter(prototype,propertyName,prop[getter]?prop[getter]:prototype[getter],prop[name],getter,name)}}}}Class.extend=gloft.Class.extend;Class.implement=function(prop){for(var name in prop){prototype[name]=prop[name]}};return Class}})();